---
layout: post
title: The encoding problem again
tags: NLP, encoding
---

I came up against a problem almost every Python beginner would encounter: the encoding of Python 2.x.

First, we should know the encode and decode functions we call on and again, especially while using Python 2.x and across platforms, nt or posix in particular. Both encode and decode take unicode as reference; that is, we encode a specific coding, say utf-8, to unicode, written as encode('utf-8'); and we decode unicode unicode to a different one, for instance utf-8, written as decode('utf-8'). 

By way of illustration:

```
# without the following encoding declaration all characters in this file will be interpreted as ascii, thus when in some non-Latin-1 locales the interpreter will report error.
# b = '查一下从上海去北京的高铁票' The non-ascii characters in this line even in comment is illegal, so should be deleted. 
# coding=utf-8 All characters above are interpreted as ascii, while below utf-8
b = '查一下从上海去北京的高铁票'
print type(b) # giving <type 'str'>
c= b.decode('utf-8')
print type(c) # giving <type 'unicode'>

d= c.encode('utf-8')
print type(d) # giving <type 'str'>
```

To get down to the guts of the matter, let me introduce this, by way of illustration:
```
from regexes import Regexes as Reg
reload(sys)
sys.setdefaultencoding('utf8')
```
Prior to this setting, str type can not be encoded.
```
a = '查一下从上海去北京的高铁票'
type(a.encode('utf-8') 
```
An error is reported saying:
```
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position 0: ordinal not in range(128)
```
Here is the official explaination:
```
Paradoxically, a UnicodeDecodeError may happen when _encoding_. The cause of it seems to be the coding-specific encode() functions that normally expect a parameter of type unicode. *It appears that on seeing an str parameter, the encode() functions "up-convert" it into unicode before converting to their own coding. It also appears that such "up-conversion" makes no assumption of str parameter's coding, choosing a default ascii decoder. Hence a decoding failure inside an encoder.*

Unlike a similar case with UnicodeEncodeError, such a failure cannot be always avoided. This is because the str result of encode() must be a legal coding-specific sequence. However, a more flexible treatment of the unexpected str argument type might first validate the str argument by decoding it, then return it unmodified if the validation was successful. As of Python2.5, this is not implemented.
```

Note that the range of ASCII is 0-127, indicating the eighth bit is always 0. 
Then `a.encode('utf-8')` equles `a.decode('ascii').encode('utf-8')`.
This line `sys.setdefaultencoding('utf8')` make the above to be `a.decode('utf-8').decode(utf-8)`. Unlike ASCII, UTF8 can recognize Chinese in perspective. 

# encoding and system default

So how to select among utf-8, unicode and others like gbk? We can break all conditions into three groups: input, processing and output. 

For the input in most cases we take strings from either console or file-local file or crawled file from remote server. The default encodings in different operating systemslocated in different regions differ according to the local languages. For example, in China the default input coding of the Winidows DOS is GBK while for most of the POSIX systems, Ubuntu for instance, the encoding is utf-8. So we should convert the inputed string from the default to unicode by decode('gbk') or decode('utf-8'). 

By the same token, strings in files need also to be decoded to unicode for most language processings, in this context regex matching. How do we know the coding of the file?

In Python we can use type() function to check the inputed string. 




...........................     
Welcome proofreading help and language suggestions. Tons of thanks in advance.


Version control system: Git
-------

Rather than a result, writing is a process starting from prewriting to the final submission. 

In this duration, many changes/versions are produced a/some particular of which would be recalled at a particular time point, in or after the process of writing. 

Students search among revisions for keeping the steps of writing before finish the first edition.

After the first edition, rewriting plays an essencial role for an excellent essay. Ernest Hemingway said that, "I rewrote the ending of Farewell to Arms, the last page of it, 39 times before I was satistified" to the question "How much rewriting do you do?" in a interview in 1956. 

"To get the words right", in words Hemingway said in that interview aforementioned, which means the pursuit of clearness and and exactness in writing, valued word, the unite of every article, very much. And absolutely, it deserves that importance.

In some difficult conditions, the writer would want to revert writings back to a previous state. Since Git generally only adds data, which means nothing is undoable, you can travel among these versions and never lose anything in almost any circumstances.

What's worse, if some versions backuped in form of files are lost or screwed up, it is irreversable and disastrous.

# Features
1. tag  
Normally every kind of Writing process contains several steps, for instance, five steps of college academic writing: prewriting, planning, drafting, revising & editing and making a final copy. These five points are specific and important in the process. We can tag those time points as snapshots right after finishing the step or later. Just as branches tags can be shared remotely on the server. 

The process is not and hardly can be linear but interlaced. Sometimes students may have to brainstorm again at the fouth step of revising & editing, two steps after planing containing brainstorm. It's possible and acceptble. Then, here a problem occurs that if the previous snapshot is editable.

1. log   
With the help of the `log` function, users can better look back to see what has happened by viewing the commit history. Almost all details, including the commit message, SHA-1 checksum, author, and the email, the date written, are recorded and, later, can be easily searched and parsed by machine. 

By way of example, argument `--grep` lets us search for keywords in the commit messages; `-S`word allows us to search word following `-S` among removed or added changes. `--since`, `--after`, `--until` and `--before` are four options for limiting the commits of date.  

1. history exploring
In this aspect, Git is versatile. Git can cut it no matter when you are searching contents of files, commit messages and diffs, whether text was added or removed, through a commit, thus resulting in pretty powerful process based and oriented supporting for the writer. It's process oriented because for the convenience of later examination the writer tends to make more commits, tags and so on to mark every even small step, which automatically forms an elaborate writing process history for every repository(essay).

# Question  
1. The fundermental one is that if Git is irreplaceable. If it's, do I have any evidence? Are there any theoretical fundations? If not, why? What are the alternatives and what are their advantages and disadvantages?

---
layout: post
title: Thesis framework
tags: thesis, framework
---

# title
English writing pedagogy based on distributed version control system and the software development

# abstract

# objectives
Version control system, nowadays increasingly represented by the distributed version control system(DVCS for short) Git, is way better than Wiki based counterparts in education in a variety of contexts.

# introduction
1. Wikis' limitations 
1. runs in a manner intuitively consist with the process approach of writing pedagogy 
1. in abroad some graduates and doctors have tried to harness version control system in their academic writing in education domain[academic exchange]; some professional writers also underpin the advise that employing Git can largely enable them to write efficiently. 
1. in industrial field, I know a startup company is creating a Git based documentation system for the programmers
1. version control system initially created for code management is increasingly adopted by non-techies, such as novelists, academia, students from all kinds of major backgrounds like philosophy, history and so on.
1. Why don't we embrace this relatively new technology to utilize our writing in variant contexts whether college level or K12 level.

# literature review
1. the history and background of why wikis are so widely phased in in the last few decades.

1. how has wiki been used by teachers and its future as expected by experts
and so on as written in [this file](status-quo)

# analysis and requirements
pedagogy based on DVCS
what each of five steps of the process approach writing pedagogy needs.

A certain step of the writing approach presented by a certain version in the corresponding branch should be related to other versions caused by the original revision in other branches.

By way of illustration, in the process of writing an essay in the drafting brand I conjure up a big idea that should be added and that results in restructuring the first process prewriting and then the subsequent processes becomes necessary,  then I come back to restructure the previous processes. But I cannot merge or rebase the chances happening in the prewriting branch to the planning and then to the drafting brand by replaying, given that hardly can the system manage such a chain automatically(three-way merge theory), so as the writer himself.

If this should only be done manually, then a relationship between those versions on the same "level" should be marked using a certain way.

This is one of the many concerns at the back of my mind. Other hard nuts including wiki vs. git, git combined with wiki, software design, finding the users are all tasks each of which cannot be tackled within a month at the least.

# design/readme
1. dictionary
  * glean words while reading 
  <leader>v
  * do practice to build sentences using the new obtained vocabulary
  * provide details for the world produced by Wordnet
  <leader>d
  * review words in the context: excerpts and the whole passage in a new window, passages are pushed to Gitst
  <leader>p
  * search words according to tags and words in excerpts and sentences
  :Glookup anything
2. comment
  * users can comment on every line by openning a preview window on the bottom
  <leader>c
  the location will be marked, revoke the comment when the cursor is in the sentence
3. spell and grammar check and style
4. programmable/hack/geek writing
  * search for particular articles according to the description or tag
  * skeleton for each step of process writing: [thesis creator](johnmcgarvey.com/apworld/student/thesiscreator.html)
    At the beginning the buffer shows the step introduction and it will vanish when the writer presses i to go to the insert mode and a preview window appear for telling writers the current, the previous and the next step. You tell the system you've finished the step by pressing 'n' in the normal mode, going to the next step. At the same time this system automatically generates a commit, with the step name as the commit comment. If the writer need to revise the previous steps or jot down some hints for the subsequent steps then .. To be short, I'm searching for a intersection of Git and process approach of writing. The final version of the system can smartly assist the writing beginner write following the writing rules.
  press n to 
this is the main and core part
wiki combined git
    gollum

# implementation
1. Git 2.6 with a unfriendly user interface: Vim
1. part of the function
1. core function 

# testing

# tools and technologies
editor  vim
management latetex
plugins vim-git, many others
assist nltk
# conclusion

# appendices

...........................     
Welcome proofreading help and language suggestions. Tons of thanks in advance.


As described as Git's killer feature in the second edition of [Pro Git](), the lightweight branching modle incredibly saved my life for three main reasons: tremendously versatile capability of handling local and private repository, multiple Git accounts management for every branch and even commits, wonderful remote branch functions. 

First and foremost, the private local branching module.
stash
cherry-pick

Secondly, how to deal with multiple accounts problems.
By way of example, we want to share a locally version controlled repository. Not only on the popular GitHub for the public branch but also on Bitbucket for all branches privately. After having completed this article you may know how to popularize two to three and then more. 

**Step one: ssh keys**

Generate two ssh keys by entering the following lines under the ~/.ssh/ directory or any directory you like:

ssh-keygen -t rsa -C "1@email.com"
ssh-keygen -t rsa -C "2@email.com"

During this process we name the first key key1 and the second key2.

**Step two: ssh config**

Open/create and editting the ~/.ssh/config:
###bash:
    Host nameforhub # any name you like
    HostName github.com # unmodifiable
    User git # ditto
    IdentityFile ~/.ssh/key1 # the corresponding directory set in step one

    Host nameforbb
    HostName bitbucket.org
    User git
    IdentityFile ~/.ssh/key2 

**Step three: ssh-add and test**
Copy the contents in ~/.ssh/key1.pub and ~/.ssh/key2.pub to the corresponding servers on [GitLab](https://gitlab.com/profile/keys) and [GitHub](https://github.com/settings/ssh).

Then add them to the system running:

ssh-add ~/.ssh/key1
ssh-add ~/.ssh/key2

ssh -T git@nameforhub
ssh -T git@nameforbb

**Step four: create repository**
1. Create one remote repository on GitHub and one on BitBucket.
2. Create one locally. 

remote branch functions:
blog
ppt

